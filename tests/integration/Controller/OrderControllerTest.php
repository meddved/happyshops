<?php
declare(strict_types=1);

namespace App\Tests\integration\Controller;


use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class OrderControllerTest extends WebTestCase
{
    private ?Client $client;

    protected function setUp()
    {
        $this->client = new Client([
            'base_uri' => 'http://localhost:8000'
        ]);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated
        $this->client = null;
    }

    public function testGetOrders()
    {
        $response = $this->client->get('/api/orders', []);
        $this->assertEquals(200, $response->getStatusCode());
        $orders = json_decode($response->getBody()->getContents());

        $this->assertEquals(1, $orders->currentPage);
        $this->assertEquals(1000, $orders->itemsPerPage);
        $this->assertEquals(5, $orders->totalItems);
        $this->assertCount(5, $orders->data);
    }

    public function testGetOrdersPaging()
    {
        $response = $this->client->get('/api/orders?page=2&limit=1', []);
        $this->assertEquals(200, $response->getStatusCode());
        $orders = json_decode($response->getBody()->getContents());

        $this->assertCount(1, $orders->data);
        $order = array_shift($orders->data);
        $this->assertEquals(2, $order->id);
    }

    public function testGetOrdersFilter()
    {
        $response = $this->client->get('/api/orders?filter={"id":1,"active":1}', []);
        $this->assertEquals(200, $response->getStatusCode());
        $orders = json_decode($response->getBody()->getContents());

        $this->assertCount(1, $orders->data);
        $order = array_shift($orders->data);
        $this->assertEquals(1, $order->id);
    }

    public function testGetOrder()
    {
        $response = $this->client->get('/api/order/1', []);

        $this->assertEquals(200, $response->getStatusCode());
        $order = json_decode($response->getBody()->getContents());
        $this->assertEquals(1, $order->id);
    }

    public function testGetOrderException()
    {
        $this->expectException(ClientException::class);
        $this->expectExceptionCode(404);
        $this->expectExceptionMessage('Order not found');

        $response = $this->client->get('/api/order/0', []);
    }
}